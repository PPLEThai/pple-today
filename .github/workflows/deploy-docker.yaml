name: Publish docker image and deploy new version

on:
  workflow_call:
    inputs:
      PACKAGE_NAME:
        type: string
        description: Name of the package to be published
        required: true
      TAG_NAME:
        type: string
        description: Tag name for the Docker image
        required: true
      DOCKER_COMPOSE_FILE:
        type: string
        description: Path to the Docker Compose file
        required: true
      DOCKER_REGISTRY:
        type: string
        description: Docker registry URL
        required: true
      DOCKERFILE_PATH:
        type: string
        description: Path to the Dockerfile
        required: true
    secrets:
      OVPN_CONFIG:
        description: OpenVPN configuration file
        required: true
      OVPN_USERNAME:
        description: OpenVPN username
        required: true
      OVPN_PASSWORD:
        description: OpenVPN password
        required: true
      OVPN_USER_KEY:
        description: OpenVPN user key
        required: true
      SSH_HOST:
        description: SSH host
        required: true
      SSH_USERNAME:
        description: SSH username
        required: true
      SSH_PRIVATE_KEY:
        description: SSH private key
        required: true

jobs:
  release:
    name: Build and push Docker image
    runs-on: ubuntu-latest
    permissions:
      contents: read # for checkout
      packages: write # to be able to push the Docker image to GitHub Container Registry
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # fetch all history for tags
          persist-credentials: false # avoid checking out the repository again

      - name: Set lowercase owner name
        run: |
          echo "OWNER_LC=${OWNER,,}" | tee $GITHUB_ENV
        env:
          OWNER: '${{ github.repository_owner }}'

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ${{ inputs.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ${{ inputs.DOCKERFILE_PATH }}
          platforms: linux/amd64
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
          args: |
            VERSION=${{ inputs.TAG_NAME }}
          tags: ${{ inputs.DOCKER_REGISTRY }}/${{ env.OWNER_LC }}/${{ inputs.PACKAGE_NAME }}:${{ inputs.TAG_NAME }}

  deploy-app:
    name: Deploy app
    runs-on: ubuntu-latest
    needs: release
    permissions:
      packages: read
    steps:
      - name: Write OpenVPN config
        run: echo "${{ secrets.OVPN_CONFIG }}" > client.ovpn

      - name: Install OpenVPN
        run: |
          sudo apt update
          sudo apt install -y openvpn openvpn-systemd-resolved

      - name: Connect to VPN
        uses: 'kota65535/github-openvpn-connect-action@cd2ed8a90cc7b060dc4e001143e811b5f7ea0af5' # v3.1.0
        with:
          config_file: client.ovpn
          username: ${{ secrets.OVPN_USERNAME }}
          password: ${{ secrets.OVPN_PASSWORD }}
          client_key: ${{ secrets.OVPN_USER_KEY }}

      - name: Use SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            echo ${{ secrets.GITHUB_TOKEN }} | docker login ${{ inputs.DOCKER_REGISTRY }} -u ${{ github.actor }} --password-stdin
            cd ~/app

            docker compose -f ${{ inputs.DOCKER_COMPOSE_FILE }} down
            yq -e '.services."${{ inputs.PACKAGE_NAME }}".image = "${{ inputs.DOCKER_REGISTRY }}/${{ env.OWNER_LC }}/${{ inputs.PACKAGE_NAME }}:${{ inputs.TAG_NAME }}"' templates/${{ inputs.DOCKER_COMPOSE_FILE }}.tmpl > ${{ inputs.DOCKER_COMPOSE_FILE }}

            docker compose -f ${{ inputs.DOCKER_COMPOSE_FILE }} up -d
