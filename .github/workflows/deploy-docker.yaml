name: Publish docker image and deploy new version

on:
  workflow_call:
    inputs:
      packages:
        type: string
        description: JSON array of package metadata to be published
        required: true
      docker_registry:
        type: string
        description: Docker registry URL
        required: true
    secrets:
      OVPN_CONFIG:
        description: OpenVPN configuration file
        required: true
      OVPN_USERNAME:
        description: OpenVPN username
        required: true
      OVPN_PASSWORD:
        description: OpenVPN password
        required: true
      OVPN_USER_KEY:
        description: OpenVPN user key
        required: true
      SSH_HOST:
        description: SSH host
        required: true
      SSH_USERNAME:
        description: SSH username
        required: true
      SSH_PRIVATE_KEY:
        description: SSH private key
        required: true
      WEB_CLIENT_ENV:
        description: Web client environment variables
        required: false

jobs:
  release:
    name: Build and push Docker image
    runs-on: ubuntu-latest

    strategy:
      matrix:
        packages: ${{ fromJson(inputs.packages) }}

    outputs:
      DOCKER_IMAGE_URI: ${{ steps.set-docker-image-tags.outputs.DOCKER_IMAGE_URI }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # fetch all history for tags
          persist-credentials: false # avoid checking out the repository again

      - name: Set docker image tags
        id: set-docker-image-tags
        working-directory: ${{ matrix.packages.path }}
        run: |
          OWNER_LC=$(echo ${{ github.repository_owner }} | tr '[:upper:]' '[:lower:]')
          echo "DOCKER_IMAGE_URI=${{ inputs.docker_registry }}/${OWNER_LC}/${{ matrix.packages.name }}:${{ matrix.packages.imageTag }}" >> $GITHUB_OUTPUT

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ${{ inputs.docker_registry }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ${{ matrix.packages.path }}/Dockerfile
          platforms: linux/amd64
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            "VERSION=${{ matrix.packages.version }}"
            "LOCAL_ENV=${{ secrets.WEB_CLIENT_ENV }}"
          tags: ${{ steps.set-docker-image-tags.outputs.DOCKER_IMAGE_URI }}

  deploy-app:
    name: Deploy app
    runs-on: ubuntu-latest
    needs: release
    steps:
      - name: Write OpenVPN config
        run: echo "${{ secrets.OVPN_CONFIG }}" > client.ovpn

      - name: Install OpenVPN
        run: |
          sudo apt update
          sudo apt install -y openvpn openvpn-systemd-resolved

      - name: Connect to VPN
        uses: 'kota65535/github-openvpn-connect-action@cd2ed8a90cc7b060dc4e001143e811b5f7ea0af5' # v3.1.0
        with:
          config_file: client.ovpn
          username: ${{ secrets.OVPN_USERNAME }}
          password: ${{ secrets.OVPN_PASSWORD }}
          client_key: ${{ secrets.OVPN_USER_KEY }}

      - name: Set docker image tags
        id: set-docker-image-tags
        run: |
          OWNER_LC=$(echo ${{ github.repository_owner }} | tr '[:upper:]' '[:lower:]')

          echo "BASE_DOCKER_IMAGE_URI=${{ inputs.docker_registry }}/${OWNER_LC}" >> $GITHUB_OUTPUT

      - name: Use SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            #!/usr/bin/env sh
            echo ${{ secrets.GITHUB_TOKEN }} | docker login ${{ inputs.docker_registry }} -u ${{ github.actor }} --password-stdin
            cd ~/app

            echo '${{ inputs.packages }}' | jq -c '.[]' | while read package
            do
              PACKAGE_NAME=$(echo $package | jq -r '.name')
              IMAGE_TAG=$(echo $package | jq -r '.imageTag')
              DOCKER_COMPOSE_FILE=$(echo $package | jq -r '.dockerComposePath')

              echo "Deploying ${PACKAGE_NAME} with image tag ${IMAGE_TAG}"

              yq -y ".services.\"${PACKAGE_NAME}\".image = \"${{ steps.set-docker-image-tags.outputs.BASE_DOCKER_IMAGE_URI }}/${PACKAGE_NAME}:${IMAGE_TAG}\"" templates/$DOCKER_COMPOSE_FILE.tmpl > $DOCKER_COMPOSE_FILE

              COMPOSE_IGNORE_ORPHANS=true; docker compose -f $DOCKER_COMPOSE_FILE up -d
            done
